public void asignarPedido(Pedido pedido){
		if(pedido.getPeso() <= PESOMAXMOTO){
			if(motosDisponibles.size() > 0) {
				int numeroMotos = motosDisponibles.size();
				double[] preciosMoto = new double[numeroMotos];
				for (int i = numeroMotos; i > 0; i--) {
					preciosMoto[i - 1] = pedido.coste(motosDisponibles.get(i - 1));
				}
				int indicePrecioMinMoto = 0;
				double precioMinMoto = Integer.MAX_VALUE;
				for (int a = 0; a < numeroMotos; a++) {
					if (preciosMoto[a] < precioMinMoto) {
						precioMinMoto = preciosMoto[a];
						indicePrecioMinMoto = a;
					}
				}
				pedido.setTransporte(motosDisponibles.get(indicePrecioMinMoto));
				motosDisponibles.removeElementAt(indicePrecioMinMoto);
			}
			else{
				pedidosEsperandoMoto.add(pedido);
			}
		}

		else{
			if(furgonetasDisponibles.size() > 0) {
				int numeroFurgonetas = furgonetasDisponibles.size();
				double[] preciosFurgo = new double[numeroFurgonetas];
				for (int i = numeroFurgonetas; i > 0; i--) {
					preciosFurgo[i - 1] = pedido.coste(furgonetasDisponibles.get(i - 1));
				}
				int indicePrecioMinFurgo = 0;
				double precioMinFurgo = Integer.MAX_VALUE;
				for (int a = 0; a < numeroFurgonetas; a++) {
					if (preciosFurgo[a] < precioMinFurgo) {
						precioMinFurgo = preciosFurgo[a];
						indicePrecioMinFurgo = a;
					}
				}
				pedido.setTransporte(furgonetasDisponibles.get(indicePrecioMinFurgo));
				furgonetasDisponibles.removeElementAt(indicePrecioMinFurgo);
			}
			else {
				pedidosEsperandoFurgoneta.add(pedido);
			}
		}
	}

public double coste(Transporte transporte) {
		if (transporte.getCodigo().charAt(0) == 'M') {
			// Creamos una Moto con los atributos de transporte, de tal manera que vamos a poder usar Moto.coste()

			Moto transporteMoto = new Moto(transporte.getCodigo(), transporte.getMapa());
			return importe + transporteMoto.coste(restaurante.getCodigo()) + transporteMoto.coste(restaurante.getCodigo(), cliente.getCodigo());
		}
		else {
			/* Se realiza un casting "(Furgoneta)transporte" en "coste(String, String)", ya que no podemos crear una Furgoneta
			con los atributos de "transporte" debido a que es una clase "abstract". Al realizar esto vamos a poder usar Furgoneta.coste(String, String)
			metodo que se implementa en "FurgonetaPropia" y "FurgonetaSubcontratada"
			 */

			return importe + transporte.coste(restaurante.getCodigo()) + ((Furgoneta)transporte).coste(restaurante.getCodigo(), cliente.getCodigo());
		}
	}